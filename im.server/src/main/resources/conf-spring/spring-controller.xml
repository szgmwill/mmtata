<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:config_${env}.properties</value>
			</list>
		</property>
	</bean>

	<!-- @Autowire enable -->
	<context:annotation-config />

	<!-- scan all the @contorller bean -->
	<context:component-scan base-package="com.mmtata.im.server.controller" />
	
	<!-- fastjson 与 SpringMVC 整合 -->
  	<!-- 
	  1)若按照jackson和SpringMVC的整合方式,应按照下面的写法,但测试发现这样会报告"HTTP Status 406"
	    The resource identified by this request is only capable of generating responses
	    with characteristics not acceptable according to the request "accept" headers.
	  2)测试通过的整合方式为上面那样在mvc:annotation-driven里面进行注册
	  3)supportedMediaTypes增加[text/html;charset=UTF-8]值,是为了兼容IE6
	    否则[application/json]值在IE6中会导致弹出对话框询问是否保存文件,而firefox等高级浏览器会正常打印json字符串
	  4)若像下面这样给supportedMediaTypes属性赋两个值[text/html;charset=UTF-8]和[application/json],则[application/json]是无效的
	    因为此时应答给浏览器(或者说请求方)的Content-Type头信息都是[text/html;charset=UTF-8],所以给它一个值就行了
	    如果给supportedMediaTypes的值为[application/json],则应答给浏览器的Content-Type头信息就是[application/json;charset=UTF-8]
	  5)关于features属性,不是serializerFeature,而是features,详见FastJsonHttpMessageConverter.java
	    它是用来控制json序列化输出时的一些额外属性,比如说该字段是否输出、输出时key使用单引号还是双引号、key不使用任何引号等等
	    QuoteFieldNames:输出key时是否使用双引号,默认为true
	    WriteMapNullValue:是否输出值为null的字段,默认为false
	    WriteNullNumberAsZero:数值字段如果为null,输出为0,而非null
	    WriteNullListAsEmpty:List字段如果为null,输出为[],而非null
	    WriteNullStringAsEmpty:字符类型字段如果为null,输出为"",而非null
	    WriteNullBooleanAsFalse:Boolean字段如果为null,输出为false,而非null
	  6)通常在网上搜到的fastjson和springMVC整合的例子中都像下面注释的代码那样给了两个属性WriteMapNullValue和QuoteFieldNames
	    这就表示为json解析器设置QuoteFieldNames和WriteMapNullValue的值为true,即输出时key使用双引号,同时也输出值为null的字段
	  7)输出时某字段为String类型,且值为null,此时若需要其输出,且输出值为空字符串,则需同时赋值WriteMapNullValue和WriteNullStringAsEmpty
	    经测试,若只赋值WriteNullStringAsEmpty,则不会输出该字段..加上WriteMapNullValue属性后,便输出了,且输出值不是null,而是预期的空字符串
   	-->
	
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/html;charset=UTF-8" />
				<property name="features">
					<array>
						<!-- <value>WriteMapNullValue</value> -->
						<value>WriteNullStringAsEmpty</value>
					</array>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 设置不拦截某些静态文件 -->
	<mvc:resources location="/" mapping="*.htm" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/img/" mapping="/img/**" />
	
	<!-- Unfortunately we have to repeat an instance of this class here because 
		the mvc:message-converters element above does not support <ref/> elements: -->
	<bean id="fastJsonHttpMessageConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter" />


	<!-- 统一异常处理 -->
	<bean id="handlerExceptionResolver" class="com.mmtata.im.server.exception.GlobalExceptionHandler" />

	<bean id="xstreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
		<property name="autodetectAnnotations" value="true"></property>
	</bean>

	<mvc:interceptors>    
		<!-- 直接将bean配置到mvc:interceptors,将会应用到所有的HandlerMapping，达到伪全局拦截器的目的。 -->
		<bean class="com.mmtata.im.server.interceptor.MonitorInterceptor" />
		<!-- 签名校验 -->
		<bean class="com.mmtata.im.server.interceptor.AuthorizeInterceptor" />
	</mvc:interceptors>
</beans>